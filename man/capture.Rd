% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/capture.R
\name{capture.code}
\alias{capture.code}
\alias{is.capture}
\title{evaluate R statements, capturing code, created vars, and printed output}
\usage{
capture.code(code_text = NULL)

is.capture(x)
}
\arguments{
\item{code_text}{the commands being evaluated as pure text}

\item{x}{the object to be checked}
}
\value{
a list containing 1) the \code{results} of each command (which might not have been
saved in an object in the statement itself), 2) a list \code{envlist}
holding the environments created for each command, 3) the statements themselves as
character strings, one string for each command regardless of how many lines
it was spread over in the code, and 4) the statements as expressions (which might
be evaluated in checking code, or parsed, or whatever). Note that all of the elements in the
list have the same number of components, which need to be accessed with \code{[[]]} to get
individual commands
}
\description{
evaluate R statements, capturing code, created vars, and printed output
}
\details{
Each expression in the code is evaluated in it's own environment, with the
previous expression's environment as the parent. That way, you can examine
what's changed after each statement.

Searching for objects in the last environment will move as needed to the
parent environments, and so will give the most recent value of each object.
}
\examples{
capture.code("x <- 2 + 2\\n#then square it\\ny <- x^2")
capture.code("for (k in 1:2) {\\n x <- k\\nsqrt(7)}")
}
