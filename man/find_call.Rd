% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_call.R
\name{find_call}
\alias{find_call}
\title{Find matching lines based on function calls.}
\usage{
find_call(fun_spec, message = NULL, mistake = FALSE, hint = FALSE)
}
\arguments{
\item{fun_spec}{character string describing the function to look for
and whatever args are to be matched, e.g. "2 + 2".
Use \code{whatever} for any arguments for which
a place is needed but for which you don't care what the value is.
"success" means that the pattern was found.}

\item{message}{a character string message to be returned on failure. If
not provided, a suitable message will be constructed based on \code{fun_spec}.}

\item{mistake}{if \code{TRUE}, then finding a matching line causes a failure. This is
useful for testing for common mistakes.}

\item{hint}{if \code{TRUE}, signals downstream functions to provide a more diagnostic
failure message. (Not used at present.)}
}
\value{
a function that takes a capture object as input and returns
a capture argument noting the line that matches (if any).
}
\description{
This locator test will look for lines with a function call matching the
one specified with the \code{fun_spec} character string. The match is established
by looking for a specific function (e.g. \code{sqrt} or \code{+}) and the given arguments
to that function. By default, arguments are compared in terms of the R statement used
rather than the value generated by that statement. You can wrap an argument with \code{eval()}
in \code{fun_spec} if you want to compare values rather than R statements. (See the examples.)
Use \code{whatever} if the test is not concerned with the statement or value of a
particular argument.
}
\details{
The "key words" \code{whatever}, \code{eval}, and \code{grab_this} in a statement
are presumed to be instructions to \code{find_call} rather than bona fide variable or function
names.
}
\examples{
require(magrittr)
USER_CODE <- capture.code("(1:4)^2") # student submission, say
test_1 <- find_call("whatever ^ 2")
USER_CODE \%>\% test_1 \%>\% .$passed
test_2 <- find_call("(1:4) ^ whatever")
USER_CODE \%>\% test_2 \%>\% .$passed
# suppose user has a different R statement for the left argument ...
USER_CODE_2 <- capture.code("c(1,2,3,4) ^ 2")
USER_CODE_2 \%>\% test_2 \%>\% .$passed # fails
test_3 <- find_call("eval(1:4) ^ whatever")
# use eval() to check for value match rather than statement match
USER_CODE_2 \%>\% test_3 \%>\% .$passed
}
\seealso{
\code{\link{check_argument}}
}
